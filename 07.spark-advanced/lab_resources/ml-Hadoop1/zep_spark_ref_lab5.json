{"paragraphs":[{"text":"%pyspark\nairbnbDF = (spark.read.format('csv')\n                    .option('header', 'true')\n                    .option('inferSchema', 'true')\n                    .option('sep', ',')\n                    .load('hdfs:///education/ece/big-data/2020/fall/bda/resources/lab5/airbnb_clean.csv'))\n\nairbnbDF.printSchema()","user":"petra","dateUpdated":"2020-12-16T14:30:44+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- host_is_superhost: string (nullable = true)\n |-- cancellation_policy: string (nullable = true)\n |-- instant_bookable: string (nullable = true)\n |-- host_total_listings_count: integer (nullable = true)\n |-- neighbourhood_cleansed: string (nullable = true)\n |-- latitude: double (nullable = true)\n |-- longitude: double (nullable = true)\n |-- property_type: string (nullable = true)\n |-- room_type: string (nullable = true)\n |-- accommodates: integer (nullable = true)\n |-- bathrooms: double (nullable = true)\n |-- bedrooms: integer (nullable = true)\n |-- beds: integer (nullable = true)\n |-- bed_type: string (nullable = true)\n |-- minimum_nights: integer (nullable = true)\n |-- number_of_reviews: integer (nullable = true)\n |-- review_scores_rating: integer (nullable = true)\n |-- review_scores_accuracy: integer (nullable = true)\n |-- review_scores_cleanliness: integer (nullable = true)\n |-- review_scores_checkin: integer (nullable = true)\n |-- review_scores_communication: integer (nullable = true)\n |-- review_scores_location: integer (nullable = true)\n |-- review_scores_value: integer (nullable = true)\n |-- price: integer (nullable = true)\n |-- bedrooms_na: integer (nullable = true)\n |-- bathrooms_na: integer (nullable = true)\n |-- beds_na: integer (nullable = true)\n |-- review_scores_rating_na: integer (nullable = true)\n |-- review_scores_accuracy_na: integer (nullable = true)\n |-- review_scores_cleanliness_na: integer (nullable = true)\n |-- review_scores_checkin_na: integer (nullable = true)\n |-- review_scores_communication_na: integer (nullable = true)\n |-- review_scores_location_na: integer (nullable = true)\n |-- review_scores_value_na: integer (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1606410259912_-1993549106","id":"20201126-170419_197272242","dateCreated":"2020-11-26T17:04:19+0000","dateStarted":"2020-12-16T14:30:44+0000","dateFinished":"2020-12-16T14:30:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:28123"},{"text":"%md\n## Demo: Linear Regression","user":"petra","dateUpdated":"2020-12-16T14:12:28+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Demo: Linear Regression</h2>\n"}]},"apps":[],"jobName":"paragraph_1606414728199_-1081877820","id":"20201126-181848_1981081982","dateCreated":"2020-11-26T18:18:48+0000","dateStarted":"2020-12-16T14:12:28+0000","dateFinished":"2020-12-16T14:12:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28124"},{"text":"%pyspark\n# Split dataset to train and test\n\ntrainDF, testDF = airbnbDF.randomSplit([.8, .2], seed=123)\nprint 'No. of rows in train DF:', trainDF.count()\nprint 'No. of rows in test DF:', testDF.count()","user":"petra","dateUpdated":"2020-12-16T14:31:24+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"No. of rows in train DF: 802\nNo. of rows in test DF: 198\n"}]},"apps":[],"jobName":"paragraph_1606414495392_-1884715147","id":"20201126-181455_1079104048","dateCreated":"2020-11-26T18:14:55+0000","dateStarted":"2020-12-16T14:31:24+0000","dateFinished":"2020-12-16T14:31:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28125"},{"text":"%pyspark\n# We will try to predict the price in function of how many people can stay at the property\n\ntrainDF.select(\"price\", \"accommodates\").show()","user":"petra","dateUpdated":"2020-12-16T14:34:09+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+------------+\n|price|accommodates|\n+-----+------------+\n|  130|           3|\n|  250|           4|\n|  405|           6|\n|  185|           2|\n|  135|           2|\n|  150|           3|\n|  155|           4|\n|  160|           1|\n| 2281|           2|\n|  297|           2|\n|   81|           4|\n|   76|           5|\n|  155|           2|\n|  150|           2|\n|   75|           2|\n|  162|           2|\n|  200|           3|\n|  115|           2|\n|  125|           2|\n|  159|           3|\n+-----+------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1606410386073_-1877526848","id":"20201126-170626_1943173513","dateCreated":"2020-11-26T17:06:26+0000","dateStarted":"2020-12-16T14:34:09+0000","dateFinished":"2020-12-16T14:34:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28126"},{"text":"%pyspark\n# We can first summarize the DF to see if it's really clean\n\ntrainDF.select(\"price\", \"accommodates\").summary().show()","user":"petra","dateUpdated":"2020-12-16T14:34:55+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+------------------+------------------+\n|summary|             price|      accommodates|\n+-------+------------------+------------------+\n|  count|               802|               802|\n|   mean|213.15960099750623|3.2768079800498753|\n| stddev|203.85681852899708| 1.990786715309765|\n|    min|                29|                 1|\n|    25%|               100|                 2|\n|    50%|               150|                 2|\n|    75%|               249|                 4|\n|    max|              2281|                15|\n+-------+------------------+------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1606414427172_1430860458","id":"20201126-181347_749775112","dateCreated":"2020-11-26T18:13:47+0000","dateStarted":"2020-12-16T14:34:55+0000","dateFinished":"2020-12-16T14:34:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28127"},{"text":"%pyspark\n# Define linear regression estimator and fit the model\n# Why doesn't it work?\n\nfrom pyspark.ml.regression import LinearRegression\n\nlr = LinearRegression(featuresCol=\"accommodates\", labelCol=\"price\")\n#lrModel = lr.fit(trainDF)","user":"petra","dateUpdated":"2020-12-16T14:36:17+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Fail to execute line 7: lrModel = lr.fit(trainDF)\nTraceback (most recent call last):\n  File \"/data/4/yarn/local/usercache/petra/appcache/application_1602801542108_1268/container_e49_1602801542108_1268_01_000001/tmp/zeppelin_pyspark-5241816525654122258.py\", line 380, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 7, in <module>\n  File \"/data/4/yarn/local/usercache/petra/appcache/application_1602801542108_1268/container_e49_1602801542108_1268_01_000001/pyspark.zip/pyspark/ml/base.py\", line 132, in fit\n    return self._fit(dataset)\n  File \"/data/4/yarn/local/usercache/petra/appcache/application_1602801542108_1268/container_e49_1602801542108_1268_01_000001/pyspark.zip/pyspark/ml/wrapper.py\", line 288, in _fit\n    java_model = self._fit_java(dataset)\n  File \"/data/4/yarn/local/usercache/petra/appcache/application_1602801542108_1268/container_e49_1602801542108_1268_01_000001/pyspark.zip/pyspark/ml/wrapper.py\", line 285, in _fit_java\n    return self._java_obj.fit(dataset._jdf)\n  File \"/data/4/yarn/local/usercache/petra/appcache/application_1602801542108_1268/container_e49_1602801542108_1268_01_000001/py4j-0.10.7-src.zip/py4j/java_gateway.py\", line 1257, in __call__\n    answer, self.gateway_client, self.target_id, self.name)\n  File \"/data/4/yarn/local/usercache/petra/appcache/application_1602801542108_1268/container_e49_1602801542108_1268_01_000001/pyspark.zip/pyspark/sql/utils.py\", line 79, in deco\n    raise IllegalArgumentException(s.split(': ', 1)[1], stackTrace)\nIllegalArgumentException: u'requirement failed: Column accommodates must be of type org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7 but was actually IntegerType.'\n"}]},"apps":[],"jobName":"paragraph_1606414908399_1314961289","id":"20201126-182148_561057068","dateCreated":"2020-11-26T18:21:48+0000","dateStarted":"2020-12-16T14:36:01+0000","dateFinished":"2020-12-16T14:36:01+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:28128"},{"text":"%pyspark\n# Vectorize the column 'accommodates'\n# Pay attention to .transform()\n\nfrom pyspark.ml.feature import VectorAssembler\n\nvecAssembler = VectorAssembler(inputCols=[\"accommodates\"], outputCol=\"features\")\nvecTrainDF = vecAssembler.transform(trainDF)\nvecTrainDF.select([\"accommodates\", \"features\"]).show()","user":"petra","dateUpdated":"2020-12-16T14:37:48+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+--------+\n|accommodates|features|\n+------------+--------+\n|           3|   [3.0]|\n|           4|   [4.0]|\n|           6|   [6.0]|\n|           2|   [2.0]|\n|           2|   [2.0]|\n|           3|   [3.0]|\n|           4|   [4.0]|\n|           1|   [1.0]|\n|           2|   [2.0]|\n|           2|   [2.0]|\n|           4|   [4.0]|\n|           5|   [5.0]|\n|           2|   [2.0]|\n|           2|   [2.0]|\n|           2|   [2.0]|\n|           2|   [2.0]|\n|           3|   [3.0]|\n|           2|   [2.0]|\n|           2|   [2.0]|\n|           3|   [3.0]|\n+------------+--------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1606414995118_787583480","id":"20201126-182315_1653835585","dateCreated":"2020-11-26T18:23:15+0000","dateStarted":"2020-12-16T14:37:48+0000","dateFinished":"2020-12-16T14:37:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28129"},{"text":"%pyspark\n# Let's try with two input columns\n\nvecAssembler_2 = VectorAssembler(inputCols=[\"accommodates\", \"bedrooms\"], outputCol=\"features\")\nvecTrainDF_2 = vecAssembler_2.transform(trainDF)\nvecTrainDF_2.select([\"accommodates\", \"bedrooms\", \"features\"]).show()","user":"petra","dateUpdated":"2020-12-16T14:38:08+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+--------+---------+\n|accommodates|bedrooms| features|\n+------------+--------+---------+\n|           3|       1|[3.0,1.0]|\n|           4|       2|[4.0,2.0]|\n|           6|       3|[6.0,3.0]|\n|           2|       1|[2.0,1.0]|\n|           2|       1|[2.0,1.0]|\n|           3|       1|[3.0,1.0]|\n|           4|       1|[4.0,1.0]|\n|           1|       1|[1.0,1.0]|\n|           2|       1|[2.0,1.0]|\n|           2|       1|[2.0,1.0]|\n|           4|       1|[4.0,1.0]|\n|           5|       2|[5.0,2.0]|\n|           2|       1|[2.0,1.0]|\n|           2|       1|[2.0,1.0]|\n|           2|       1|[2.0,1.0]|\n|           2|       1|[2.0,1.0]|\n|           3|       1|[3.0,1.0]|\n|           2|       1|[2.0,1.0]|\n|           2|       1|[2.0,1.0]|\n|           3|       1|[3.0,1.0]|\n+------------+--------+---------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1606415029926_-464441322","id":"20201126-182349_626293401","dateCreated":"2020-11-26T18:23:49+0000","dateStarted":"2020-12-16T14:38:09+0000","dateFinished":"2020-12-16T14:38:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28130"},{"text":"%pyspark\n# Which parameters can the estimator take?\n\nfrom pyspark.ml.regression import LinearRegression\n\nlr = LinearRegression(featuresCol=\"features\", labelCol=\"price\")\nlr.explainParams().split('\\n')\n","user":"petra","dateUpdated":"2020-12-16T14:40:01+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['aggregationDepth: suggested depth for treeAggregate (>= 2). (default: 2)', 'elasticNetParam: the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty. (default: 0.0)', 'epsilon: The shape parameter to control the amount of robustness. Must be > 1.0. Only valid when loss is huber (default: 1.35)', 'featuresCol: features column name. (default: features, current: features)', 'fitIntercept: whether to fit an intercept term. (default: True)', 'labelCol: label column name. (default: label, current: price)', 'loss: The loss function to be optimized. Supported options: squaredError, huber. (default: squaredError)', 'maxIter: max number of iterations (>= 0). (default: 100)', 'predictionCol: prediction column name. (default: prediction)', 'regParam: regularization parameter (>= 0). (default: 0.0)', 'solver: The solver algorithm for optimization. Supported options: auto, normal, l-bfgs. (default: auto)', 'standardization: whether to standardize the training features before fitting the model. (default: True)', 'tol: the convergence tolerance for iterative algorithms (>= 0). (default: 1e-06)', 'weightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined)']\n"}]},"apps":[],"jobName":"paragraph_1606415053289_484032421","id":"20201126-182413_1229901838","dateCreated":"2020-11-26T18:24:13+0000","dateStarted":"2020-12-16T14:40:01+0000","dateFinished":"2020-12-16T14:40:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28131"},{"text":"%pyspark\n# Fit the estimator to the data\n\nlrModel = lr.fit(vecTrainDF)\nlrModel","user":"petra","dateUpdated":"2020-12-16T14:41:18+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"LinearRegression_47729b6e0aa6cbaa3fae\n"}]},"apps":[],"jobName":"paragraph_1606415101763_943009782","id":"20201126-182501_1064629175","dateCreated":"2020-11-26T18:25:01+0000","dateStarted":"2020-12-16T14:41:18+0000","dateFinished":"2020-12-16T14:41:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28132"},{"text":"%pyspark\n# Print the coefficients of the model\n\nk = lrModel.coefficients[0]\nn = lrModel.intercept\n\nprint 'y =', k, '* x +', n","user":"petra","dateUpdated":"2020-12-16T14:41:41+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"y = 62.627665173598565 * x + 7.94076798477\n"}]},"apps":[],"jobName":"paragraph_1606422235863_783820906","id":"20201126-202355_1466708218","dateCreated":"2020-11-26T20:23:55+0000","dateStarted":"2020-12-16T14:41:41+0000","dateFinished":"2020-12-16T14:41:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28133"},{"text":"%pyspark\n# Perform the cross validation (and optionally grid search)\n\nfrom pyspark.ml.evaluation import RegressionEvaluator\nfrom pyspark.ml.tuning import CrossValidator, ParamGridBuilder\nfrom pyspark.ml import Pipeline\n\n# Define the params for cv (and grid search: commented line)\nparams = (ParamGridBuilder()\n          .addGrid(lr.elasticNetParam, [0.0, 1.0])\n          .build())\nevaluator = RegressionEvaluator(labelCol=\"price\", predictionCol=\"prediction\", metricName=\"r2\")\n\ncv = CrossValidator(estimator=lr, evaluator=evaluator, estimatorParamMaps=params, numFolds=5, seed=11)\ncvModel = cv.fit(vecTrainDF)\n\nprint 'Avg. metrics:', cvModel.avgMetrics\nprint 'Best model slope:', cvModel.bestModel.coefficients[0]\nprint 'Best model intercept:', cvModel.bestModel.intercept","user":"petra","dateUpdated":"2020-12-16T14:47:34+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Avg. metrics: [0.36987818435057224, 0.36987818435057224]\nBest model slope: 62.627665173598565\nBest model intercept: 7.94076798477\n"}]},"apps":[],"jobName":"paragraph_1606422373161_-294486560","id":"20201126-202613_419045312","dateCreated":"2020-11-26T20:26:13+0000","dateStarted":"2020-12-16T14:47:35+0000","dateFinished":"2020-12-16T14:47:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28134"},{"text":"%pyspark\n# Apply the model to the test set. But, first we need to process the test data the same way we processed the train data.\n\nvecTestDF = vecAssembler.transform(testDF)\npredDF = cvModel.transform(vecTestDF)\n\npredDF.select(\"accommodates\", \"features\", \"price\", \"prediction\").show()","user":"petra","dateUpdated":"2020-12-16T14:50:00+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+--------+-----+------------------+\n|accommodates|features|price|        prediction|\n+------------+--------+-----+------------------+\n|           4|   [4.0]|  350|  258.451428679161|\n|           2|   [2.0]|  250|133.19609833196387|\n|           6|   [6.0]|  275|383.70675902635816|\n|           2|   [2.0]|  115|133.19609833196387|\n|           8|   [8.0]|  145| 508.9620893735553|\n|           2|   [2.0]|  135|133.19609833196387|\n|           1|   [1.0]|   67| 70.56843315836531|\n|           2|   [2.0]|  141|133.19609833196387|\n|           2|   [2.0]|  157|133.19609833196387|\n|           2|   [2.0]|   50|133.19609833196387|\n|           2|   [2.0]|   45|133.19609833196387|\n|           1|   [1.0]|   45| 70.56843315836531|\n|           2|   [2.0]|  165|133.19609833196387|\n|           4|   [4.0]|  195|  258.451428679161|\n|           3|   [3.0]|  143|195.82376350556245|\n|           3|   [3.0]|  150|195.82376350556245|\n|           6|   [6.0]|  425|383.70675902635816|\n|           3|   [3.0]|  126|195.82376350556245|\n|           4|   [4.0]|  138|  258.451428679161|\n|           4|   [4.0]|  418|  258.451428679161|\n+------------+--------+-----+------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1606422764058_1989286107","id":"20201126-203244_197789648","dateCreated":"2020-11-26T20:32:44+0000","dateStarted":"2020-12-16T14:50:00+0000","dateFinished":"2020-12-16T14:50:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28135"},{"text":"%pyspark\n# ALTERNATIVE\n# Create a pipeline from all of the stages before (data preparation + model definition. Don't put cv in the pipeline.)\n# Apply the pipeline to test frame\n\nfrom pyspark.ml import Pipeline\n\nvecAssembler = VectorAssembler(inputCols=[\"accommodates\"], outputCol=\"features\")\nlr = LinearRegression(featuresCol=\"features\", labelCol=\"price\")\npipeline = Pipeline(stages=[vecAssembler, lr])\n\npipelineModel = pipeline.fit(trainDF)\n\npredDF = pipelineModel.transform(testDF)\npredDF.select(\"accommodates\", \"features\", \"price\", \"prediction\").show()","user":"petra","dateUpdated":"2020-12-16T14:53:52+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+--------+-----+------------------+\n|accommodates|features|price|        prediction|\n+------------+--------+-----+------------------+\n|           4|   [4.0]|  350|  258.451428679161|\n|           2|   [2.0]|  250|133.19609833196387|\n|           6|   [6.0]|  275|383.70675902635816|\n|           2|   [2.0]|  115|133.19609833196387|\n|           8|   [8.0]|  145| 508.9620893735553|\n|           2|   [2.0]|  135|133.19609833196387|\n|           1|   [1.0]|   67| 70.56843315836531|\n|           2|   [2.0]|  141|133.19609833196387|\n|           2|   [2.0]|  157|133.19609833196387|\n|           2|   [2.0]|   50|133.19609833196387|\n|           2|   [2.0]|   45|133.19609833196387|\n|           1|   [1.0]|   45| 70.56843315836531|\n|           2|   [2.0]|  165|133.19609833196387|\n|           4|   [4.0]|  195|  258.451428679161|\n|           3|   [3.0]|  143|195.82376350556245|\n|           3|   [3.0]|  150|195.82376350556245|\n|           6|   [6.0]|  425|383.70675902635816|\n|           3|   [3.0]|  126|195.82376350556245|\n|           4|   [4.0]|  138|  258.451428679161|\n|           4|   [4.0]|  418|  258.451428679161|\n+------------+--------+-----+------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1606423097273_1119521633","id":"20201126-203817_1522077330","dateCreated":"2020-11-26T20:38:17+0000","dateStarted":"2020-12-16T14:53:52+0000","dateFinished":"2020-12-16T14:53:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28136"},{"text":"%pyspark\n# How good is the model?\n# RegressionEvaluator will compute the differences between the predicted price and the real one and calculate the metric of overall model quality (R2)\n\nfrom pyspark.ml.evaluation import RegressionEvaluator\n\nregressionEvaluator = RegressionEvaluator(predictionCol=\"prediction\", labelCol=\"price\", metricName=\"r2\")\n\nr2 = regressionEvaluator.evaluate(predDF)\nprint 'R2 of the linear model is:', r2","user":"petra","dateUpdated":"2020-12-16T14:54:54+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"R2 of the linear model is: 0.427506233551\n"}]},"apps":[],"jobName":"paragraph_1606423125650_206973661","id":"20201126-203845_548088799","dateCreated":"2020-11-26T20:38:45+0000","dateStarted":"2020-12-16T14:54:54+0000","dateFinished":"2020-12-16T14:54:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28137"},{"text":"%md\n## Lab: Random Forest Regression\nBuild and evaluate a Random Forest model the same way we did with Linear Regression.\n","user":"petra","dateUpdated":"2020-12-16T14:12:44+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Lab: Random Forest Regression</h2>\n<p>Build and evaluate a Random Forest model the same way we did with Linear Regression.</p>\n"}]},"apps":[],"jobName":"paragraph_1606423171685_1482689125","id":"20201126-203931_472487826","dateCreated":"2020-11-26T20:39:31+0000","dateStarted":"2020-12-16T14:12:44+0000","dateFinished":"2020-12-16T14:12:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28138"},{"text":"%pyspark\n# Spit data to train and test set. Use the same split and seed as for linear regression, so we can compare the models at the end.\n\ntrainDF, testDF = airbnbDF.randomSplit([.8, .2], seed=123)\nprint 'No. of rows in train DF:', trainDF.count()\nprint 'No. of rows in test DF:', testDF.count()","user":"petra","dateUpdated":"2020-12-16T15:57:06+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"No. of rows in train DF: 802\nNo. of rows in test DF: 198\n"}]},"apps":[],"jobName":"paragraph_1606423387308_-1264945955","id":"20201126-204307_897634400","dateCreated":"2020-11-26T20:43:07+0000","dateStarted":"2020-12-16T15:57:06+0000","dateFinished":"2020-12-16T15:57:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28139"},{"text":"%pyspark\n# Select only three atributes, since we didn't have time to look at the one-hot encoding - accommodates, bathrooms, review_scores_rating. \n# Predict the price as before. Name the dataframe trainDF \n\ncols =  ['accommodates', 'bathrooms', 'review_scores_rating', 'price']\ntrainDF = trainDF.select(cols)\ntrainDF.show(10)","user":"petra","dateUpdated":"2020-12-16T15:57:37+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+---------+--------------------+-----+\n|accommodates|bathrooms|review_scores_rating|price|\n+------------+---------+--------------------+-----+\n|           3|      1.0|                  88|  130|\n|           4|      2.0|                  74|  250|\n|           6|      2.5|                 100|  405|\n|           2|      1.0|                  96|  185|\n|           2|      1.0|                  95|  135|\n|           3|      1.0|                  92|  150|\n|           4|      1.0|                  99|  155|\n|           1|      1.0|                  80|  160|\n|           2|      1.0|                  99| 2281|\n|           2|      1.0|                  97|  297|\n+------------+---------+--------------------+-----+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1606423502718_-782690629","id":"20201126-204502_1643804267","dateCreated":"2020-11-26T20:45:02+0000","dateStarted":"2020-12-16T15:57:37+0000","dateFinished":"2020-12-16T15:57:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28140"},{"text":"%pyspark\n# Vectorize the attribute (feature) columns with VectorAssembler\n\nfrom pyspark.ml.feature import VectorAssembler\n\ninput_cols =  ['accommodates', 'bathrooms', 'review_scores_rating']\nvecAssembler = VectorAssembler(inputCols=input_cols, outputCol=\"features\")\n\nvecTrainDF = vecAssembler.transform(trainDF)\nvecTrainDF.select([\"accommodates\", 'bathrooms', 'review_scores_rating', \"features\"]).show(10)","user":"petra","dateUpdated":"2020-12-16T15:58:21+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+---------+--------------------+---------------+\n|accommodates|bathrooms|review_scores_rating|       features|\n+------------+---------+--------------------+---------------+\n|           3|      1.0|                  88| [3.0,1.0,88.0]|\n|           4|      2.0|                  74| [4.0,2.0,74.0]|\n|           6|      2.5|                 100|[6.0,2.5,100.0]|\n|           2|      1.0|                  96| [2.0,1.0,96.0]|\n|           2|      1.0|                  95| [2.0,1.0,95.0]|\n|           3|      1.0|                  92| [3.0,1.0,92.0]|\n|           4|      1.0|                  99| [4.0,1.0,99.0]|\n|           1|      1.0|                  80| [1.0,1.0,80.0]|\n|           2|      1.0|                  99| [2.0,1.0,99.0]|\n|           2|      1.0|                  97| [2.0,1.0,97.0]|\n+------------+---------+--------------------+---------------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1606423919415_-1007323453","id":"20201126-205159_1631051026","dateCreated":"2020-11-26T20:51:59+0000","dateStarted":"2020-12-16T15:58:21+0000","dateFinished":"2020-12-16T15:58:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28141"},{"text":"%pyspark\n# Build a RandomForestRegressor. The parameter that you need to define is labelCol (as before), but you can also define 'maxDepth'=7.\n# You can read about maxDepth using rf.explainParams().split('\\n')\n\nfrom pyspark.ml.regression import RandomForestRegressor\n\nrf = RandomForestRegressor(labelCol=\"price\", maxDepth=7)\nrf.explainParams().split('\\n')","user":"petra","dateUpdated":"2020-12-16T15:59:04+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['cacheNodeIds: If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees. Users can set how often should the cache be checkpointed or disable it by setting checkpointInterval. (default: False)', 'checkpointInterval: set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext. (default: 10)', 'featureSubsetStrategy: The number of features to consider for splits at each tree node. Supported options: auto, all, onethird, sqrt, log2, (0.0-1.0], [1-n]. (default: auto)', 'featuresCol: features column name. (default: features)', 'impurity: Criterion used for information gain calculation (case-insensitive). Supported options: variance (default: variance)', 'labelCol: label column name. (default: label, current: price)', 'maxBins: Max number of bins for discretizing continuous features.  Must be >=2 and >= number of categories for any categorical feature. (default: 32)', 'maxDepth: Maximum depth of the tree. (>= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes. (default: 5, current: 7)', 'maxMemoryInMB: Maximum memory in MB allocated to histogram aggregation. If too small, then 1 node will be split per iteration, and its aggregates may exceed this size. (default: 256)', 'minInfoGain: Minimum information gain for a split to be considered at a tree node. (default: 0.0)', 'minInstancesPerNode: Minimum number of instances each child must have after split. If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be >= 1. (default: 1)', 'numTrees: Number of trees to train (>= 1). (default: 20)', 'predictionCol: prediction column name. (default: prediction)', 'seed: random seed. (default: -5851613654371098793)', 'subsamplingRate: Fraction of the training data used for learning each decision tree, in range (0, 1]. (default: 1.0)']\n"}]},"apps":[],"jobName":"paragraph_1606424016783_-1047048502","id":"20201126-205336_11415105","dateCreated":"2020-11-26T20:53:36+0000","dateStarted":"2020-12-16T15:59:04+0000","dateFinished":"2020-12-16T15:59:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28142"},{"text":"%pyspark\n# Fit the model to the dataframe with the vectorized features\n\nrfModel = rf.fit(vecTrainDF)\nrfModel","user":"petra","dateUpdated":"2020-12-16T16:00:26+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"RandomForestRegressionModel (uid=RandomForestRegressor_498a9d7596aa3e88e0d4) with 20 trees\n"}]},"apps":[],"jobName":"paragraph_1606424051234_752713572","id":"20201126-205411_1872242433","dateCreated":"2020-11-26T20:54:11+0000","dateStarted":"2020-12-16T16:00:26+0000","dateFinished":"2020-12-16T16:00:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28143"},{"text":"%pyspark\n# Cross Validation \n\nfrom pyspark.ml.evaluation import RegressionEvaluator\nfrom pyspark.ml.tuning import CrossValidator, ParamGridBuilder\n\nparams = (ParamGridBuilder()\n          .addGrid(rf.numTrees, [1, 2])\n          .build())\nevaluator = RegressionEvaluator(labelCol=\"price\", predictionCol=\"prediction\", metricName=\"r2\")\n\ncv = CrossValidator(estimator=rf, evaluator=evaluator, estimatorParamMaps=params, numFolds=3, seed=11)\ncvModel = cv.setParallelism(1).fit(vecTrainDF)\nprint cvModel.avgMetrics\nprint cvModel.bestModel","user":"petra","dateUpdated":"2020-12-16T16:01:50+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[0.17230678038761066, 0.24818166089547145]\nRandomForestRegressionModel (uid=RandomForestRegressor_498a9d7596aa3e88e0d4) with 2 trees\n"}]},"apps":[],"jobName":"paragraph_1606424064639_-890511524","id":"20201126-205424_1809911808","dateCreated":"2020-11-26T20:54:24+0000","dateStarted":"2020-12-16T16:01:50+0000","dateFinished":"2020-12-16T16:01:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28144"},{"text":"%pyspark\n# Prepare test frame\n\ntestDF = testDF.select(cols)\nvecTestDF = vecAssembler.transform(testDF)\nvecTestDF.show(10)","user":"petra","dateUpdated":"2020-12-16T16:02:38+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+---------+--------------------+-----+---------------+\n|accommodates|bathrooms|review_scores_rating|price|       features|\n+------------+---------+--------------------+-----+---------------+\n|           4|      2.0|                  98|  350| [4.0,2.0,98.0]|\n|           2|      2.0|                 100|  250|[2.0,2.0,100.0]|\n|           6|      1.0|                  99|  275| [6.0,1.0,99.0]|\n|           2|      1.0|                  94|  115| [2.0,1.0,94.0]|\n|           8|      1.0|                  94|  145| [8.0,1.0,94.0]|\n|           2|      1.0|                  98|  135| [2.0,1.0,98.0]|\n|           1|      1.5|                  98|   67| [1.0,1.5,98.0]|\n|           2|      1.0|                 100|  141|[2.0,1.0,100.0]|\n|           2|      1.0|                  87|  157| [2.0,1.0,87.0]|\n|           2|      3.0|                  82|   50| [2.0,3.0,82.0]|\n+------------+---------+--------------------+-----+---------------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1606424077960_668377917","id":"20201126-205437_1160801103","dateCreated":"2020-11-26T20:54:37+0000","dateStarted":"2020-12-16T16:02:38+0000","dateFinished":"2020-12-16T16:02:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28145"},{"text":"%pyspark\n# Apply the cvModel to the test data\n\npredDF = cvModel.transform(vecTestDF)\npredDF.show(10)","user":"petra","dateUpdated":"2020-12-16T16:03:46+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+---------+--------------------+-----+---------------+------------------+\n|accommodates|bathrooms|review_scores_rating|price|       features|        prediction|\n+------------+---------+--------------------+-----+---------------+------------------+\n|           4|      2.0|                  98|  350| [4.0,2.0,98.0]|           263.125|\n|           2|      2.0|                 100|  250|[2.0,2.0,100.0]|193.79044117647058|\n|           6|      1.0|                  99|  275| [6.0,1.0,99.0]| 336.6859077716865|\n|           2|      1.0|                  94|  115| [2.0,1.0,94.0]| 145.7353237644988|\n|           8|      1.0|                  94|  145| [8.0,1.0,94.0]| 195.0746440354228|\n|           2|      1.0|                  98|  135| [2.0,1.0,98.0]| 161.1796664402025|\n|           1|      1.5|                  98|   67| [1.0,1.5,98.0]|124.48484848484847|\n|           2|      1.0|                 100|  141|[2.0,1.0,100.0]| 172.2154411764706|\n|           2|      1.0|                  87|  157| [2.0,1.0,87.0]| 145.7353237644988|\n|           2|      3.0|                  82|   50| [2.0,3.0,82.0]|58.041666666666664|\n+------------+---------+--------------------+-----+---------------+------------------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1606424264551_-73033846","id":"20201126-205744_1334925889","dateCreated":"2020-11-26T20:57:44+0000","dateStarted":"2020-12-16T16:03:46+0000","dateFinished":"2020-12-16T16:03:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28146"},{"text":"%pyspark\n# ALTERNATIVE\n# Create a pipeline from all of the stages before (data preparation + model definition).\n# Apply the pipeline to test frame.\n\nfrom pyspark.ml import Pipeline\n\ninput_cols =  ['accommodates', 'bathrooms', 'review_scores_rating']\nvecAssembler = VectorAssembler(inputCols=input_cols, outputCol=\"features\")\nrf = RandomForestRegressor(labelCol=\"price\", maxDepth=7)\npipeline = Pipeline(stages=[vecAssembler, rf])\n\npipelineModel = pipeline.fit(trainDF)\n\npredDF = pipelineModel.transform(testDF)\npredDF.select('accommodates', 'bathrooms', 'review_scores_rating', 'features', 'price', 'prediction').show(10)","user":"petra","dateUpdated":"2020-12-16T15:18:02+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1606424289219_1681014919","id":"20201126-205809_2007677940","dateCreated":"2020-11-26T20:58:09+0000","dateStarted":"2020-12-16T15:18:02+0000","dateFinished":"2020-12-16T15:18:04+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:28147"},{"text":"%pyspark\n# Evaluate the quality of the model using R2 and RMSE\n\nfrom pyspark.ml.evaluation import RegressionEvaluator\n\nregressionEvaluator_r2 = RegressionEvaluator(predictionCol=\"prediction\", labelCol=\"price\", metricName=\"r2\")\nregressionEvaluator_rmse = RegressionEvaluator(predictionCol=\"prediction\", labelCol=\"price\", metricName=\"rmse\")\n\nr2 = regressionEvaluator_r2.evaluate(predDF)\nrmse = regressionEvaluator_rmse.evaluate(predDF)\n\nprint('R2 of the random forest regression is:', r2)\nprint('RMSE of the random forest regression is:', rmse)","user":"petra","dateUpdated":"2020-12-16T16:06:45+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"('R2 of the random forest regression is:', 0.39082227056258545)\n('RMSE of the random forest regression is:', 117.78443271507375)\n"}]},"apps":[],"jobName":"paragraph_1606424322636_-597176983","id":"20201126-205842_255664236","dateCreated":"2020-11-26T20:58:42+0000","dateStarted":"2020-12-16T16:06:45+0000","dateFinished":"2020-12-16T16:06:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28148"},{"text":"%pyspark\n# Which feature is the most important for our model?\n\nprint 'Feature importance for rfModel:', rfModel.featureImportances\nprint 'Feature importance for cvModel:', cvModel.bestModel.featureImportances","user":"petra","dateUpdated":"2020-12-16T16:09:08+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Feature importance for rfModel: (3,[0,1,2],[0.5972929639106616,0.2647968184484924,0.13791021764084604])\nFeature importance for cvModel: (3,[0,1,2],[0.5971883971897669,0.2387614661994219,0.16405013661081122])\n"}]},"apps":[],"jobName":"paragraph_1606424540156_-492202841","id":"20201126-210220_107745704","dateCreated":"2020-11-26T21:02:20+0000","dateStarted":"2020-12-16T16:09:08+0000","dateFinished":"2020-12-16T16:09:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28149"},{"text":"%pyspark\nimport pandas as pd\n\nfeaturesDF = pd.DataFrame(list(zip(vecAssembler.getInputCols(), rfModel.featureImportances)), columns=[\"feature\", \"importance\"])\nfeaturesDF","user":"petra","dateUpdated":"2020-12-16T16:12:20+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"                feature  importance\n0          accommodates    0.597293\n1             bathrooms    0.264797\n2  review_scores_rating    0.137910\n"}]},"apps":[],"jobName":"paragraph_1606424588248_1841388326","id":"20201126-210308_1564791791","dateCreated":"2020-11-26T21:03:08+0000","dateStarted":"2020-12-16T16:12:20+0000","dateFinished":"2020-12-16T16:12:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28150"},{"text":"%pyspark\nfeaturesDF.plot(kind='bar')","user":"petra","dateUpdated":"2020-12-16T15:19:30+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Fail to execute line 1: featuresDF.plot(kind='bar')\nTraceback (most recent call last):\n  File \"/data/4/yarn/local/usercache/petra/appcache/application_1602801542108_1268/container_e49_1602801542108_1268_01_000001/tmp/zeppelin_pyspark-5241816525654122258.py\", line 380, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib64/python2.7/site-packages/pandas/plotting/_core.py\", line 2942, in __call__\n    sort_columns=sort_columns, **kwds)\n  File \"/usr/lib64/python2.7/site-packages/pandas/plotting/_core.py\", line 1973, in plot_frame\n    **kwds)\n  File \"/usr/lib64/python2.7/site-packages/pandas/plotting/_core.py\", line 1799, in _plot\n    plot_obj = klass(data, subplots=subplots, ax=ax, kind=kind, **kwds)\n  File \"/usr/lib64/python2.7/site-packages/pandas/plotting/_core.py\", line 1181, in __init__\n    MPLPlot.__init__(self, data, **kwargs)\n  File \"/usr/lib64/python2.7/site-packages/pandas/plotting/_core.py\", line 98, in __init__\n    _raise_if_no_mpl()\n  File \"/usr/lib64/python2.7/site-packages/pandas/plotting/_core.py\", line 48, in _raise_if_no_mpl\n    raise ImportError(\"matplotlib is required for plotting.\")\nImportError: matplotlib is required for plotting.\n"}]},"apps":[],"jobName":"paragraph_1606424616779_1484014929","id":"20201126-210336_1731341385","dateCreated":"2020-11-26T21:03:36+0000","dateStarted":"2020-12-16T15:19:30+0000","dateFinished":"2020-12-16T15:19:30+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:28151"},{"text":"%pyspark\n","user":"petra","dateUpdated":"2020-12-16T15:19:30+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1608131970831_-483506907","id":"20201216-151930_1024546876","dateCreated":"2020-12-16T15:19:30+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:28152"}],"name":"ece-2020/spark/ref/lab5","id":"2FQJ6BJ8S","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark2:petra:":[],"sh:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}